#version 330 core

//Defined also in vertexshader.h
#define VERTEX_POSITION 0
#define TEXTURE_DATA 1
#define NORMAL_DATA 2
#define TANGENT_DATA 3
#define BITANGENT_DATA 4

// Input vertex data, different for all executions of this shader.
layout(location = VERTEX_POSITION) in vec3 vertexPosition_modelspace;
layout(location = TEXTURE_DATA) in vec2 vertexUV;
layout(location = NORMAL_DATA) in vec3 normals;
layout(location = TANGENT_DATA) in vec3 tangents;
layout(location = BITANGENT_DATA) in vec3 bitangents;

out vec2 UV;
out vec3 NORMALS;

out mat3 TBN;
out vec3 TangentFragPos;
out vec3 TangentLightPos;

/* system outputs
vec4 gl_Position;
float gl_PointSize;
float gl_ClipDistance[];
*/
uniform mat4 MVP;
uniform mat4 M;
uniform vec3 L;

void main() {	
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	vec3 FragPos = vec3(M * vec4(vertexPosition_modelspace, 1.0)); 
	UV = vertexUV;

	mat3 normalMatrix = transpose(inverse(mat3(M)));	

	//TODO: TBN in OBJparser. http://www.terathon.com/code/tangent.html
	vec3 T = normalize(normalMatrix * tangents);
    vec3 B = normalize(normalMatrix * bitangents);
    vec3 N = normalize(normalMatrix * normals); 

	mat3 TBN = transpose(mat3(T, B, N));
	TangentFragPos  = TBN * FragPos;
	TangentLightPos = TBN * L;
}
